name: PR Quality Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  pull-requests: write
  contents: read
  issues: write

jobs:
  quality-check:
    runs-on: ubuntu-latest

    steps:
      - name: Check PR size
        uses: actions/github-script@v7
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const totalChanges = files.reduce((sum, file) => sum + file.changes, 0);
            console.log(`üîç Total changes detected: ${totalChanges}`);

            if (totalChanges > 1000) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['large-pr']
              });

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '‚ö†Ô∏è This PR is quite large (>1000 changes). Consider splitting it into smaller PRs for easier review.'
              });
            }

      - name: Check for WIP (Work in Progress)
        uses: actions/github-script@v7
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = context.payload.pull_request.title.toLowerCase();
            const isWIP = title.includes('wip') || title.includes('[wip]') || title.includes('draft');

            if (isWIP) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['work-in-progress']
              });

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: 'üöß This PR appears to be a Work in Progress (WIP). Please remove "WIP" or "Draft" from the title once it‚Äôs ready for review.'
              });
            }

      - name: Validate commit messages
        uses: actions/github-script@v7
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: commits } = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const invalidCommits = commits.filter(commit => {
              const message = commit.commit.message.trim();
              // Conventional Commits: type(scope): description
              const regex = /^(feat|fix|docs|style|refactor|test|chore|perf|build|ci|revert)(\([^)]+\))?: .{1,50}/;
              return !regex.test(message);
            });

            if (invalidCommits.length > 0) {
              const invalidList = invalidCommits
                .map(c => `- \`${c.commit.message.split('\n')[0]}\``)
                .join('\n');

              const comment = [
                '‚ö†Ô∏è **Commit Message Validation Failed**',
                'Please ensure all commit messages follow the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) format:',
                '`type(scope): short description`',
                '',
                'Example: `feat(auth): add JWT-based login`',
                '',
                'Invalid commits:',
                invalidList
              ].join('\n');

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }