name: PR Quality Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check PR size
      uses: actions/github-script@v7
      with:
        script: |
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const totalChanges = files.reduce((sum, file) => sum + file.changes, 0);
          console.log(`Total changes: ${totalChanges}`);
          
          if (totalChanges > 1000) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['large-pr']
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '⚠️ This PR is quite large. Consider breaking it down into smaller PRs for easier review.'
            });
          }

    - name: Check for WIP
      uses: actions/github-script@v7
      with:
        script: |
          const title = context.payload.pull_request.title.toLowerCase();
          const isWIP = title.includes('wip') || title.includes('[wip]') || title.includes('draft');
          
          if (isWIP) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['work-in-progress']
            });
          }

    - name: Validate commit messages
      uses: actions/github-script@v7
      with:
        script: |
          const { data: commits } = await github.rest.pulls.listCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const invalidCommits = commits.filter(commit => {
            const message = commit.commit.message;
            return !message.match(/^(feat|fix|docs|style|refactor|test|chore|perf|build|ci|revert)(\([^)]+\))?: .{1,50}/);
          });
          
          if (invalidCommits.length > 0) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `⚠️ Some commit messages don't follow conventional commit format. Please use: feat|fix|docs|style|refactor|test|chore|perf|build|ci|revert(scope): description`
            });
          }